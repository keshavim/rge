use std::cell::{RefCell, RefMut};
use std::rc::Rc;
use winit::{
    event::{Event as WinitEvent, WindowEvent as WinitWindowEvent},
    event_loop::{ControlFlow, EventLoop},
    window::{Window, WindowBuilder},
};
use glutin::prelude::*;
use glow::HasContext;

use crate::log::rge_engine_error;

use super::events::{
    Event, KeyPressedEvent, KeyReleasedEvent, MouseButtonPressedEvent, MouseButtonReleasedEvent,
    MouseMovedEvent, MouseScrolledEvent, WindowCloseEvent, WindowResizeEvent,
};

pub struct WindowBuilder {
    width: u32,
    height: u32,
    title: String,
    vsync: Option<bool>,
}

impl WindowBuilder {
    pub fn vsync(&mut self, vsync: bool) -> &mut Self {
        self.vsync = Some(vsync);
        self
    }

    fn init_window(&self) -> (EventLoop<()>, Rc<Window>, Rc<glow::Context>) {
        let event_loop = EventLoop::new();
        let window = WindowBuilder::new()
            .with_title(&self.title)
            .with_inner_size(winit::dpi::LogicalSize::new(self.width, self.height))
            .build(&event_loop)
            .expect("Failed to create window");

        let window = Rc::new(window);

        let gl_context = unsafe {
            glutin::ContextBuilder::new()
                .with_vsync(self.vsync.unwrap_or(true))
                .with_gl_profile(glutin::GlProfile::Core)
                .with_gl(glutin::GlRequest::Specific(glutin::Api::OpenGl, (4, 5)))
                .with_multisampling(4)
                .with_double_buffer(Some(true))
                .build_windowed(window.clone(), &event_loop)
                .expect("Failed to create OpenGL context")
                .make_current()
                .expect("Failed to make context current")
        };

        let gl = unsafe {
            glow::Context::from_loader_function(|s| gl_context.get_proc_address(s) as *const _)
        };

        (event_loop, window, Rc::new(gl))
    }

    pub fn build(self) -> Window {
        let (event_loop, window, gl) = self.init_window();

        Window {
            title: self.title,
            width: self.width,
            height: self.height,
            vsync: self.vsync.unwrap_or(true),
            event_callback: RefCell::new(None),
            event_loop: Some(event_loop),
            window,
            gl,
        }
    }
}

type EventCallback = RefCell<Option<Box<dyn FnMut(&dyn Event)>>>;

pub struct Window {
    title: String,
    width: u32,
    height: u32,
    vsync: bool,
    event_callback: EventCallback,
    event_loop: Option<EventLoop<()>>,
    window: Rc<Window>,
    gl: Rc<glow::Context>,
}

impl Window {
    pub fn new(title: &str, width: u32, height: u32) -> WindowBuilder {
        WindowBuilder {
            width,
            height,
            title: title.to_string(),
            vsync: None,
        }
    }

    pub fn run<F>(mut self, mut update: F) where F: 'static + FnMut() {
        let event_loop = self.event_loop.take().unwrap();
        let window = self.window.clone();
        let gl = self.gl.clone();

        event_loop.run(move |event, _, control_flow| {
            *control_flow = ControlFlow::Poll;

            match event {
                WinitEvent::WindowEvent { event, .. } => {
                    self.handle_window_event(event);
                }
                WinitEvent::MainEventsCleared => {
                    update();
                    self.update();
                }
                WinitEvent::RedrawRequested(_) => {
                    // Handle redraw if needed
                }
                _ => {}
            }
        });
    }

    fn handle_window_event(&mut self, event: WinitWindowEvent) {
        let mut callback = self.event_callback.borrow_mut();
        
        match event {
            WinitWindowEvent::CloseRequested => {
                let e = WindowCloseEvent::new();
                if let Some(c) = callback.as_mut() {
                    c(&e);
                }
            }
            WinitWindowEvent::Resized(size) => {
                let width = size.width;
                let height = size.height;
                self.width = width;
                self.height = height;
                
                unsafe {
                    self.gl.viewport(0, 0, width as i32, height as i32);
                }
                
                let e = WindowResizeEvent::new(width, height);
                if let Some(c) = callback.as_mut() {
                    c(&e);
                }
            }
            WinitWindowEvent::KeyboardInput { input, .. } => {
                if let Some(keycode) = input.virtual_keycode {
                    match input.state {
                        winit::event::ElementState::Pressed => {
                            let e = KeyPressedEvent::new(keycode, false);
                            if let Some(c) = callback.as_mut() {
                                c(&e);
                            }
                        }
                        winit::event::ElementState::Released => {
                            let e = KeyReleasedEvent::new(keycode);
                            if let Some(c) = callback.as_mut() {
                                c(&e);
                            }
                        }
                    }
                }
            }
            WinitWindowEvent::MouseInput { state, button, .. } => {
                match state {
                    winit::event::ElementState::Pressed => {
                        let e = MouseButtonPressedEvent::new(button);
                        if let Some(c) = callback.as_mut() {
                            c(&e);
                        }
                    }
                    winit::event::ElementState::Released => {
                        let e = MouseButtonReleasedEvent::new(button);
                        if let Some(c) = callback.as_mut() {
                            c(&e);
                        }
                    }
                }
            }
            WinitWindowEvent::MouseWheel { delta, .. } => {
                let (x, y) = match delta {
                    winit::event::MouseScrollDelta::LineDelta(x, y) => (x as f64, y as f64),
                    winit::event::MouseScrollDelta::PixelDelta(pos) => (pos.x, pos.y),
                };
                let e = MouseScrolledEvent::new(x, y);
                if let Some(c) = callback.as_mut() {
                    c(&e);
                }
            }
            WinitWindowEvent::CursorMoved { position, .. } => {
                let e = MouseMovedEvent::new(position.x, position.y);
                if let Some(c) = callback.as_mut() {
                    c(&e);
                }
            }
            _ => {}
        }
    }

    pub fn update(&self) {
        unsafe {
            self.gl.clear_color(0.2, 0.1, 0.3, 1.0);
            self.gl.clear(glow::COLOR_BUFFER_BIT);
        }
        
        self.window.request_redraw();
    }

    pub fn get_name(&self) -> &str {
        &self.title
    }

    pub fn get_size(&self) -> (u32, u32) {
        (self.width, self.height)
    }

    pub fn set_vsync(&mut self, enabled: bool) {
        self.vsync = enabled;
        // TODO: Implement vsync toggle with glutin
    }

    pub fn is_vsync(&self) -> bool {
        self.vsync
    }

    pub fn get_native_window(&self) -> Rc<Window> {
        self.window.clone()
    }

    pub fn set_event_callback<F>(&self, callback: F)
    where
        F: FnMut(&dyn Event) + 'static,
    {
        *self.event_callback.borrow_mut() = Some(Box::new(callback));
    }
}
